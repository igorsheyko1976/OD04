Для оценки сложности алгоритмов сортировки используем Big O-нотацию. 
Рассмотрим каждый алгоритм в отдельности:

1. Quick Sort
Функция quick_sort рекурсивно сортирует массив, выбирая первый элемент в качестве опорного (pivot), и затем делит массив на три части: элементы, меньшие опорного, 
равные опорному и большие опорного. Затем сортировка применяется рекурсивно к левому и правому подмассивам, и результат объединяется.

Средняя сложность: O(n log n) — В среднем случае каждое разделение массива происходит на две равные части, и рекурсивный вызов требует логарифмическую глубину.

Худшая сложность: O(n^2) — В худшем случае, если массив уже отсортирован или все элементы одинаковы, каждое разделение массива будет создавать один подмассив с одним 
элементом и один подмассив со всеми остальными, что требует n делений глубиной n.

2. Bubble Sort
Функция bubble_sort повторно проходит по массиву, сравнивая и обменивая соседние элементы, пока весь массив не будет отсортирован.

Средняя и худшая сложность: O(n^2) — Каждый элемент сравнивается со всеми другими элементами, что требует порядка n^2 операций.

3. Selection Sort
Функция selection_sort находит минимальный элемент в несортированной части массива и обменивает его с первым элементом этой части, затем повторяет процесс для оставшейся
части массива.

Средняя и худшая сложность: O(n^2) — В каждом проходе находится минимальный элемент оставшейся части массива, что требует порядка n^2 операций.


Таким образом, сложности алгоритмов сортировки:

1. Quick Sort: Средняя O(n log n), Худшая O(n^2)
2. Bubble Sort: O(n^2)
3. Selection Sort: O(n^2)
